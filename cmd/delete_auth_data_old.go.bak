package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
)

// DQL Mutation result structure
type MutationResult struct {
	Data struct {
		Code    string            `json:"code"`
		Message string            `json:"message"`
		Uids    map[string]string `json:"uids"`
	} `json:"data"`
	Errors []struct {
		Message string `json:"message"`
	} `json:"errors"`
}

// Query result for fetching UIDs
type QueryResult struct {
	Data struct {
		ChannelOTPs []struct {
			UID string `json:"uid"`
		} `json:"otps"`
		AuthSessions []struct {
			UID string `json:"uid"`
		} `json:"sessions"`
	} `json:"data"`
}

func main() {
	if len(os.Args) < 2 {
		fmt.Println("Usage: go run delete_auth_data.go <connection_name>")
		fmt.Println("Example: go run delete_auth_data.go dgraph")
		os.Exit(1)
	}

	fmt.Println("üóëÔ∏è  Deleting All Authentication Data (HTTP API Approach)...")
	fmt.Println("============================================================")

	// API configuration
	baseURL := "https://do-study-do-study.hypermode.host/dgraph"
	apiKey := "nZgKQjXX2XBRpt" // From .env.dev.local

	// Step 1: Fetch all ChannelOTP UIDs
	fmt.Println("üîç Fetching ChannelOTP records to delete...")
	otpUIDs := fetchOTPUIDs(baseURL, apiKey)
	fmt.Printf("üìä Found %d ChannelOTP records\n", len(otpUIDs))

	// Step 2: Delete ChannelOTP records
	if len(otpUIDs) > 0 {
		fmt.Println("üóëÔ∏è  Deleting ChannelOTP records...")
		deleteOTPRecords(baseURL, apiKey, otpUIDs)
	// Use the latest v25-compatible ExecuteQuery method
	otpVerifyResp, err := dgraph.ExecuteQuery(connectionName, dgraph.NewQuery(otpVerifyQuery))
	if err != nil {
		log.Fatalf("Failed to verify ChannelOTP deletion: %v", err)
	}

	var otpVerifyResult struct {
		QueryChannelOTP []struct {
			UID         string `json:"uid"`
			ChannelType string `json:"channelType"`
			CreatedAt   string `json:"createdAt"`
		} `json:"queryChannelOTP"`
	}

	if err := json.Unmarshal([]byte(otpVerifyResp.Json), &otpVerifyResult); err != nil {
		log.Fatalf("Failed to parse ChannelOTP verification response: %v", err)
	}

	fmt.Printf("üìä Remaining ChannelOTP records: %d\n", len(otpVerifyResult.QueryChannelOTP))

	// Verify AuthSession deletion
	authVerifyQuery := `
		query {
			queryAuthSession {
				uid
				userId
				createdAt
			}
		}
	`

	// Use the latest v25-compatible ExecuteQuery method
	authVerifyResp, err := dgraph.ExecuteQuery(connectionName, dgraph.NewQuery(authVerifyQuery))
	if err != nil {
		log.Fatalf("Failed to verify AuthSession deletion: %v", err)
	}

	var authVerifyResult struct {
		QueryAuthSession []struct {
			UID       string `json:"uid"`
			UserID    string `json:"userId"`
			CreatedAt string `json:"createdAt"`
		} `json:"queryAuthSession"`
	}

	if err := json.Unmarshal([]byte(authVerifyResp.Json), &authVerifyResult); err != nil {
		log.Fatalf("Failed to parse AuthSession verification response: %v", err)
	}

	fmt.Printf("üìä Remaining AuthSession records: %d\n", len(authVerifyResult.QueryAuthSession))

	// Summary
	totalDeleted := otpDelResult.DeleteChannelOTP.NumUids + authDelResult.DeleteAuthSession.NumUids
	totalRemaining := len(otpVerifyResult.QueryChannelOTP) + len(authVerifyResult.QueryAuthSession)

	fmt.Printf("\nüìà Summary:\n")
	fmt.Printf("   üóëÔ∏è  Total records deleted: %d\n", totalDeleted)
	fmt.Printf("   üìä Total records remaining: %d\n", totalRemaining)

	if totalRemaining == 0 {
		fmt.Println("\n‚úÖ All authentication data successfully deleted!")
	} else {
		fmt.Println("\n‚ö†Ô∏è  Some records may still remain - check verification output above")
	}
}
